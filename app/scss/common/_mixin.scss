@import "variable";
@mixin max-screen($res) {
    @media screen and (max-width: $res) {
        @content;
    }
}
@mixin min-screen($res) {
    @media screen and (min-width: $res) {
        @content;
    }
}

@mixin screen($res-min, $res-max, $orientation: false) {
    @if $orientation {
        @media screen and (min-width: em($res-min, $MASTER_FONT_SIZE))
                      and (max-width: em($res-max, $MASTER_FONT_SIZE))
                      and (orientation:#{$orientation}) {
            @content;
        }
    }
    @else {
        @media screen and (min-width: em($res-min, $MASTER_FONT_SIZE))
                      and (max-width: em($res-max, $MASTER_FONT_SIZE)) {
            @content;
        }
    }
}

/// Set a background svg with a raster image fallback
///
/// @param {url} $svg - URL of the background svg.
/// @param {url} $png - URL of the raster fallback image.
@mixin background-image-svg($svg, $png){
    background-image: url($png);
    background-image: url($svg), none;
}

/// IE8 supported method of setting an element's opacity using alpha filters
///
/// @param {decimal} $opacity - Opacity level (0 - 1)
/// @param {boolean} $important [false] - Whether to force the font size with ```!important```
@mixin opacity($opacity, $important: false) {
    $opacity-ie: $opacity * 100;

    @if ($important) {
        opacity: $opacity !important;
        filter: alpha(opacity=$opacity-ie) !important; //IE8
    }
    @else {
        opacity: $opacity;
        filter: alpha(opacity=$opacity-ie); //IE8
    }
}


/// Vendor prefix helper
///
/// @param {string} $name - The value to be vendor prefixed
/// @param {variable} $argument - The variable args are passed straight through
@mixin vendor-prefix($name, $args...) {
    -webkit-#{$name}: $args;
    -ms-#{$name}: $args;
    -moz-#{$name}: $args;
    -o-#{$name}: $args;
    #{$name}: $args;
}

/// Vendor prefixed transition method
///
/// @param {variable} $args - Variable args passed straight through to output
///
/// @require vendor-prefix
@mixin transition($args...) {
    @include vendor-prefix(transition, $args);
}



/// $family,$size,$weight,$line-height
@mixin font($family: null, $size: null, $weight: null, $line-height: null) {
    @include font-family($family);

    @if ($size) {
        @include font-size($size);
    }

    @if ($weight) {
        @include font-weight($weight);
    }

    @if ($line-height) {
        @include line-height($line-height);
    }
    @else {
        @include font-line-height($family);
    }
}


@mixin font-family($family) {
    @if ($family) {
        font-family: #{$family}, $FONT_FAMILY;
    }
    @else {
        font-family: $FONT_FAMILY;
    }
}

/// @param {size} $size - The font size
/// @param {boolean} $important [false] - Whether to force the font size with ```!important```
@mixin font-size($size, $important: false) {
    @if ($important) {
        font-size: $size !important;
    }
    @else {
        font-size: $size;
    }
}

/// @param {size} $size - The line-height
@mixin line-height($size) {
    line-height: $size;
}


/// Return a weight from the $FONT_WEIGHTS map. If the weight does not exist in the font group's weight map, the entered value will be returned as the value of ```font-weight```.
///
/// @param {string} $weight [null] - The font weight
@mixin font-weight($weight: null) {
    $weight: if($weight, $weight, 'NORMAL');

    @if (map-has-key($FONT_WEIGHTS, $weight)) {
        font-weight: map-get($FONT_WEIGHTS, $weight);
    }
    @else {
        font-weight: $weight;
    }
}

///不同宽度下，条件数切换
@mixin one-column-size(){
    @include max-screen($CARD_LIST_2_COLUMN_BREAKPOINT - 1){
        @content;
    }
}

@mixin two-column-size(){
    @include min-screen($CARD_LIST_2_COLUMN_BREAKPOINT){
        @content;
    }
}

@mixin three-column-size(){
    @include min-screen($CARD_LIST_3_COLUMN_BREAKPOINT){
        @content;
    }
}

@mixin four-column-size(){
    @include min-screen($CARD_LIST_4_COLUMN_BREAKPOINT){
        @content;
    }
}

@mixin five-column-size(){
    @include min-screen($CARD_LIST_5_COLUMN_BREAKPOINT){
        @content;
    }
}

//切换成左右两栏
@mixin card_switcher() {
    article {
        display: table;
        .card_item_image {
            display: table-cell;
            width: 50%;
            padding-right: 10px;
        }
        .card_item_info {
            display: table-cell;
            width: 55%;
            padding-left: 10px;
            vertical-align: middle;
        }
    }
}